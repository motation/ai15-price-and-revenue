/**
 * Define general parameters, dependencies and repositories for the build script
 */
buildscript {
    ext {
        springBootVersion = '1.2.2.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.bmuschko:gradle-docker-plugin:2.6'
    }
}

//configure(ext.)

/**
 * Load several plugins, consult the gradle documentation for more info
 */
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'com.bmuschko.docker-remote-api'


// imports for DockerTasks
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerWaitContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer


/**
 * Define the name and version of the resulting jar file
 */
jar {
    baseName = 'price-api-service'
    version = '0.0.1-SNAPSHOT'
}


/**
 * Define source and target java version compatibility
 */
sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'hawai'
mainClassName = 'de.hawhamburg.microservices.api.price.PriceApiServiceApplication'

/**
 * Setup library repositories
 */
repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    serviceTest {
        java.srcDir file('src/serviceTest/java')
        resources.srcDir file('src/serviceTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }

    /*consumerDrivenTest {
        java.srcDir file('src/consumerDrivenTest/java')
        resources.srcDir file('src/consumerDrivenTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }*/
}


configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}


/**
 * Configure project internal as well as external dependencies
 */
dependencies {
    // TODO: Added ver no on the three core starter deps to make the maven plugin to work

    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}")

    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    compile("org.springframework.cloud:spring-cloud-starter-hystrix:1.0.0.RELEASE")
    compile("org.springframework.cloud:spring-cloud-starter-eureka:1.0.0.RELEASE")

    compile("org.springframework.cloud:spring-cloud-starter-bus-amqp:1.0.0.RELEASE")
    compile("org.springframework.cloud:spring-cloud-netflix-hystrix-amqp:1.0.0.RELEASE")

    compile("org.springframework.cloud:spring-cloud-starter-security:1.0.0.RELEASE")
    compile("org.springframework.security.oauth:spring-security-oauth2:2.0.6.RELEASE")

    compile("org.apache.httpcomponents:httpclient:4.2.1")
    compile("org.apache.httpcomponents:fluent-hc:4.2.1")

    compile project(":util")

    testCompile 'org.mockito:mockito-all:2.0.2-beta'
    testCompile 'org.assertj:assertj-core:3.1.0'
    testCompile 'org.testng:testng:6.9.6'
    testCompile 'com.jayway.restassured:rest-assured:2.5.0'

}


/**
 * Setup docker task
 */
docker {
    /* TODO !IMPORTANT!
     * set this to you desired docker daemon. In case of local docker via docker-toolbox
     * find out the ip of your docker-machine via 'docker-machine url default'
     * TODO: Keep the https:// !
     */
    if (System.properties['os.name'].toString().toLowerCase().contains('windows')){
        url = 'https://192.168.99.100:2376'
        // set path to the certificate directory on your machine
        certPath = new File(System.properties['user.home'],'/.docker/machine/certs')
        println certPath.toString()
    }
    if(System.properties['os.name'].toString().toLowerCase().contains('linux')){
        url = 'https://127.0.0.1:2376'
        // set path to the certificate directory on your machine
        certPath = new File(System.properties['user.home'],'/.docker/machine/machines/default')
    }
}

/**
 * Setup Tests
 */

test {
    // enable TestNG support (default is JUnit)
    useTestNG()

    reports.html.destination = file("$reports.html.destination/unit")
    reports.junitXml.destination = file("$reports.junitXml.destination/unit")
}



/**
 * Define tasks
 */


task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

/**
 * This task copies the tar file created by the distTar task from
 * the distributions folder to the docker folder. The distTar task
 * in return is called from the build task, which is a dependency
 * of this task.
 */
task copyDist(type: Copy, dependsOn: [build, wrapper]) {
    from('build/distributions/' + jar.baseName + '.tar')
    into('build/docker/')
    from('build/resources/main/truststore.jks')
    into('build/docker/')
}


/**
 * This task creates the Dockerfile needed to create the Docker image.
 * It inherits the java:8 docker image, sets some Spring Docker Profile variable,
 * exposes port 8080 to the outer world and adds our tar file as content at the
 * root path of the image.
 */
task createDockerfile(type: Dockerfile, dependsOn: [copyDist]) {
    destFile = project.file('build/docker/Dockerfile')
    from 'java:8'
    maintainer 'Sven-Ole Fedders "sven-ole.fedders@haw-hamburg.de"'
    environmentVariable('JAVA_OPTS', '-Dspring.profiles.active=docker -Djavax.net.ssl.trustStore=truststore.jks -Djavax.net.ssl.trustStorePassword=password')
    exposePort(8080)
    entryPoint("/price-api-service/bin/price-api-service")
    addFile({
        'truststore.jks'
    }, {
        'truststore.jks'
    })
    addFile({
        jar.baseName + '.tar'
    }, {
        '/'
    })
}

/**
 * This task builds the actual image of this service by using the previously
 * created Dockerfile from the ./build/docker folder and applying a talking tag
 * to the image
 */

task pullMysql(type:DockerPullImage){
    repository = 'mysql'
    tag = 'latest'
}

task buildImage(type: DockerBuildImage, dependsOn: [createDockerfile,pullMysql]) {
    inputDir = createDockerfile.destFile.parentFile
    tag = 'price-api-service'
}

task buildRootImage(type: DockerBuildImage,dependsOn: [createDockerfile]){
    inputDir = createDockerfile.destFile.parentFile
    tag = 'price-api-service'
}


task createMysqlContainer(type: DockerCreateContainer) {
    imageId = "mysql:latest"
    portBindings = ["3306:3306"]
    containerName = "mysql-price"
    env = ['MYSQL_ROOT_PASSWORD=root',"MYSQL_DATABASE=pricerevenue","MYSQL_USER=admin","MYSQL_PASSWORD=root"]
}

task startMysqlContainer(type:DockerStartContainer, dependsOn:[createMysqlContainer]){
    targetContainerId { createMysqlContainer.getContainerId() }
}

startMysqlContainer {}.doLast(){
    println("Waiting for MYSQL to start up...")
    sleep(60 * 1000)
}

/**
 * Start and Stop Tasks for RabbitMQ-Server
 */
task pullRabbitMQImage(type: DockerPullImage){
    repository = "rabbitmq"
    tag = "3-management"
}

task createRabbitMQContainer(type: DockerCreateContainer, dependsOn: [pullRabbitMQImage, startMysqlContainer]) {
    imageId = "rabbitmq:3-management"
    portBindings = ["5672:5672","15672:15672"]
    containerName = "rabbitmq"
}

task startRabbitMQContainer(type: DockerStartContainer, dependsOn: [createRabbitMQContainer]) {
    targetContainerId { createRabbitMQContainer.getContainerId() }
}

task removeRabbitMQContainer(type: DockerRemoveContainer) {
    targetContainerId { createRabbitMQContainer.getContainerId() }
}

task stopRabbitMQContainer(type: DockerStopContainer) {
    targetContainerId { createRabbitMQContainer.getContainerId() }
    finalizedBy removeRabbitMQContainer
}

/**
 * Start and Stop Tasks for Discovery-Server
 */
task createNetflixDiscoveryContainer(type: DockerCreateContainer, dependsOn: [startRabbitMQContainer]) {
    imageId = "discovery-server"
    portBindings = ["8761:8761"]
    containerName = "discovery"
}

task startNetflixDiscoveryContainer(type: DockerStartContainer, dependsOn: [createNetflixDiscoveryContainer]) {
    targetContainerId { createNetflixDiscoveryContainer.getContainerId() }
}

task removeNetflixDiscoveryContainer(type: DockerRemoveContainer) {
    targetContainerId { createNetflixDiscoveryContainer.getContainerId() }
    finalizedBy stopRabbitMQContainer
}

task stopNetflixDiscoveryContainer(type: DockerStopContainer) {
    targetContainerId { createNetflixDiscoveryContainer.getContainerId() }
    finalizedBy removeNetflixDiscoveryContainer
}

/**
 * Start and Stop Tasks for Auth-Server
 */
task createNetflixAuthContainer(type: DockerCreateContainer, dependsOn: [startNetflixDiscoveryContainer]) {
    imageId = "auth-server"
    portBindings = ["9999:9999"]
    containerName = "auth"
}

task startNetflixAuthContainer(type: DockerStartContainer, dependsOn: [createNetflixAuthContainer]) {
    targetContainerId { createNetflixAuthContainer.getContainerId() }
}

task removeNetflixAuthContainer(type: DockerRemoveContainer) {
    targetContainerId { createNetflixAuthContainer.getContainerId() }
    finalizedBy stopNetflixDiscoveryContainer
}

task stopNetflixAuthContainer(type: DockerStopContainer) {
    targetContainerId { createNetflixAuthContainer.getContainerId() }
    finalizedBy removeNetflixAuthContainer
}


/**
 * Start and Stop Tasks for Price-Service
 */
task createPriceServiceContainer(type: DockerCreateContainer, dependsOn: [startNetflixAuthContainer]) {
    imageId = "price-service"
    containerName = "price"
    links = ["discovery:discovery", "mysql-price:mysql-price"]
}

task startPriceServiceContainer(type: DockerStartContainer, dependsOn: [createPriceServiceContainer]) {
    targetContainerId { createPriceServiceContainer.getContainerId() }
}

task removePriceServiceContainer(type: DockerRemoveContainer) {
    targetContainerId { createPriceServiceContainer.getContainerId() }
    finalizedBy stopNetflixAuthContainer
}

task stopPriceServiceContainer(type: DockerStopContainer) {
    targetContainerId { createPriceServiceContainer.getContainerId() }
    finalizedBy removePriceServiceContainer
}

/**
 * Start and Stop Tasks for Revenue Core Server
 */
task createRevenueServiceContainer(type: DockerCreateContainer, dependsOn: [startPriceServiceContainer]) {
    imageId = "revenue-service"
    containerName = "revenue"
    links = ["discovery:discovery", "mysql-price:mysql-price"]
}

task startRevenueServiceContainer(type: DockerStartContainer, dependsOn: [createRevenueServiceContainer]) {
    targetContainerId { createRevenueServiceContainer.getContainerId() }
}

task removeRevenueServiceContainer(type: DockerRemoveContainer) {
    targetContainerId { createRevenueServiceContainer.getContainerId() }
    finalizedBy stopPriceServiceContainer
}

task stopRevenueServiceContainer(type: DockerStopContainer) {
    targetContainerId { createRevenueServiceContainer.getContainerId() }
    finalizedBy removeRevenueServiceContainer
}


/**
 * Start and Stop Tasks for RevenueComposite-Server
 */
task createRevenueCompositeServiceContainer(type:DockerCreateContainer, dependsOn: [startRevenueServiceContainer]){
    imageId = "revenue-composite"
    containerName = "revenue-composite"
    links = ["discovery:discovery","rabbitmq:rabbitmq"]
}

task startRevenueCompositeServiceContainer(type: DockerStartContainer, dependsOn: [createRevenueCompositeServiceContainer]) {
    targetContainerId { createRevenueCompositeServiceContainer.getContainerId() }
}

task removeRevenueCompositeServiceContainer(type: DockerRemoveContainer) {
    targetContainerId { createRevenueCompositeServiceContainer.getContainerId() }
    finalizedBy stopRevenueServiceContainer
}

task stopRevenueCompositeServiceContainer(type: DockerStopContainer) {
    targetContainerId { createRevenueCompositeServiceContainer.getContainerId() }
    finalizedBy removeRevenueCompositeServiceContainer
}


/**
 * Start and Stop Tasks for PriceComposite-Server
 */
task createPriceCompositeServiceContainer(type: DockerCreateContainer, dependsOn: [startRevenueCompositeServiceContainer]) {
    imageId = "price-composite"
    containerName = "price-composite"
    links = ["discovery:discovery","rabbitmq:rabbitmq"]
}

task startPriceCompositeServiceContainer(type: DockerStartContainer, dependsOn: [createPriceCompositeServiceContainer]) {
    targetContainerId { createPriceCompositeServiceContainer.getContainerId() }
}

task removePriceCompositeServiceContainer(type: DockerRemoveContainer) {
    targetContainerId { createPriceCompositeServiceContainer.getContainerId() }
    finalizedBy stopRevenueCompositeServiceContainer
}

task stopPriceCompositeServiceContainer(type: DockerStopContainer) {
    targetContainerId { createPriceCompositeServiceContainer.getContainerId() }
    finalizedBy removePriceCompositeServiceContainer
}

/**
 * Start and Stop Tasks for PriceAPI-Server
 */
task createPriceAPIServiceContainer(type: DockerCreateContainer, dependsOn: [startPriceCompositeServiceContainer]) {
    imageId = "price-api-service"
    containerName = "priceapi"
    links = ["auth:auth", "discovery:discovery", "rabbitmq:rabbitmq"]
}

task startPriceAPIServiceContainer(type: DockerStartContainer, dependsOn: [createPriceAPIServiceContainer]) {
    targetContainerId { createPriceAPIServiceContainer.getContainerId() }
}

task removePriceAPIServiceContainer(type: DockerRemoveContainer) {
    targetContainerId { createPriceAPIServiceContainer.getContainerId() }
    finalizedBy stopPriceCompositeServiceContainer
}

task stopPriceAPIServiceContainer(type: DockerStopContainer) {
    targetContainerId { createPriceAPIServiceContainer.getContainerId() }
    finalizedBy removePriceAPIServiceContainer
}

/**
 * Start and Stop Tasks for MonitorDashboard-Server
 */
task createTurbineServiceContainer(type: DockerCreateContainer, dependsOn: [startPriceAPIServiceContainer]) {
    imageId = "turbine"
    containerName = "turbine"
    links = ["discovery:discovery"]
}

task startTurbineServiceContainer(type: DockerStartContainer, dependsOn: [createTurbineServiceContainer]) {
    targetContainerId { createTurbineServiceContainer.getContainerId() }
}

task removeTurbineServiceContainer(type: DockerRemoveContainer) {
    targetContainerId { createTurbineServiceContainer.getContainerId() }
    finalizedBy stopPriceAPIServiceContainer
}

task stopTurbineServiceContainer(type: DockerStopContainer) {
    targetContainerId { createTurbineServiceContainer.getContainerId() }
    finalizedBy removeTurbineServiceContainer
}

/**
 * Start and Stop Tasks for MonitorDashboard-Server
 */
task createMonitorDashboardServiceContainer(type: DockerCreateContainer, dependsOn: [startTurbineServiceContainer]) {
    imageId = "monitor-dashboard"
    portBindings = ["7979:7979"]
    containerName = "monitor"
    links = ["priceapi:priceapi","price-composite:price-composite","revenue-composite:revenue-composite", "turbine:turbine"]
}

task startMonitorDashboardServiceContainer(type: DockerStartContainer, dependsOn: [createMonitorDashboardServiceContainer]) {
    targetContainerId { createMonitorDashboardServiceContainer.getContainerId() }
}

task removeMonitorDashboardServiceContainer(type: DockerRemoveContainer) {
    targetContainerId { createMonitorDashboardServiceContainer.getContainerId() }
    finalizedBy stopTurbineServiceContainer
}

task stopMonitorDashboardServiceContainer(type: DockerStopContainer) {
    targetContainerId { createMonitorDashboardServiceContainer.getContainerId() }
    finalizedBy removeMonitorDashboardServiceContainer
}

/**
 * Start and Stop Tasks for Edge-Server
 */
task createNetflixEdgeContainer(type: DockerCreateContainer, dependsOn: [startMonitorDashboardServiceContainer]) {
    imageId = "edge-server"
    portBindings = ["443:8765"]
    containerName = "edge"
    links = ["discovery:discovery", "priceapi:priceapi"]
}

task startNetflixEdgeContainer(type: DockerStartContainer, dependsOn: [createNetflixEdgeContainer]) {
    targetContainerId { createNetflixEdgeContainer.getContainerId() }
}

task removeNetflixEdgeContainer(type: DockerRemoveContainer) {
    targetContainerId { createNetflixEdgeContainer.getContainerId() }
    finalizedBy stopMonitorDashboardServiceContainer
}

task stopNetflixEdgeContainer(type: DockerStopContainer) {
    targetContainerId { createNetflixEdgeContainer.getContainerId() }
    finalizedBy removeNetflixEdgeContainer
}


task setupApplicationLandscape(dependsOn: [startNetflixEdgeContainer]){

}
setupApplicationLandscape.doLast {
    println("Waiting for MS to start up...")
    sleep(60 * 1000)
    println("Done waiting, let's do this!")
}


/**
 * This task executes all service tests. The supporting Netflix services
 * are required to start our own services, so it is made sure these are available and properly started.
 */
task serviceTest(type: Test, dependsOn: [setupApplicationLandscape]) {
    useTestNG()
    testClassesDir = sourceSets.serviceTest.output.classesDir
    classpath = sourceSets.serviceTest.runtimeClasspath

    reports.html.destination = file("$reports.html.destination/service")
    reports.junitXml.destination = file("$reports.junitXml.destination/service")
    finalizedBy stopNetflixEdgeContainer
}

task serviceTestSetupUp(type: Test) {
    useTestNG()
    testClassesDir = sourceSets.serviceTest.output.classesDir
    classpath = sourceSets.serviceTest.runtimeClasspath

    reports.html.destination = file("$reports.html.destination/service")
    reports.junitXml.destination = file("$reports.junitXml.destination/service")
}


task createContainerForCDT(type: DockerCreateContainer, dependsOn: [serviceTest]){
    imageId = 'artifactory.mars.haw-hamburg.de:5002/exttestcontainer_for_api'
}


/**
 * This task executes all Consumer Driven Tests after all ServiceTests have been successfull.
 * The supporting Netflix services are required to start our own services, so it is made sure
 * these are available and properly started.
 */
task startContainerForCDT(type: DockerStartContainer, dependsOn: [createContainerForCDT]) {
    targetContainerId{ createContainerForCDT.getContainerId()}
}

task consumerDrivenTest(type: DockerWaitContainer, dependsOn: [startContainerForCDT]){
    targetContainerId{ createContainerForCDT.getContainerId()}
    //finalizedBy stopNetflixEdgeContainer
}

























/**
 * Will be run on the CI Server (bamboo)
 */
task buildAll(dependsOn: [buildImage]) {

}

















tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
    }
}

task buildOnlyRoot(dependsOn:[buildRootImage]){
//    if ("$arg1"=="true"){
//        println "Nur Root bauen"
//    } else {
//        println "alles bauen"
//    }
//    buildRootImage
}